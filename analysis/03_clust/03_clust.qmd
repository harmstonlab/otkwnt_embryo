---
title: 03_clust
author: Qian Hui TAN
date: '`r format(Sys.time(), "%d %B %Y")`'
format:
  html: 
    keep-md: true
    embed-resources: true
    df-print: kable
    toc: true
    toc-depth: 4
    code-fold: true
    number-sections: true
    smooth-scroll: true
    code-tools: true
    code-line-numbers: true
  gfm: 
    df-print: kable
    toc: true 
    toc-depth: 4
    number-sections: true
    prefer-html: true
---
```{r}
#| label = "setup",
#| include = FALSE

knitr::opts_chunk$set(#fig.width=12, fig.height=8, 
                      fig.path='../figures/03_clust/',
                      dev=c("png"))

```

# Clustering 


# Setup

```{r}
suppressPackageStartupMessages({
    library(DESeq2)
    library(pheatmap)
    library(clusterProfiler)
    library(ComplexHeatmap)
    library(circlize)
    library(org.Dm.eg.db)
    library(RColorBrewer)
    # General tidying up
    library(tidyverse)
    library(reshape2)
    library(knitr)
    library(grid)
})

source("../../scripts/R/clustering_functions.R")
source("../../scripts/R/go_kegg_functions.R")
```


```{r}
# Initialize the starting seed
set.seed(1)
```

```{r}
## If the output directory doesn't exist, create it
if(!dir.exists("../output/03_clust")){
  dir.create("../output/03_clust")
}

output_dir <- "../output/03_clust/"
```

# Read in data

Run DESeq: 

```{r}
dds = readRDS("../output/01_QC/dds_filt.RDS")
ensembl.genes= readRDS("../output/01_QC/ensembl_genes.RDS")
lfc.threshold = log2(1.5)

# Removing lowly expressed genes, only to be done once at the start of the differential expression step
filter = apply(counts(dds, normalized = TRUE), 1, function(x){ mean(x) >= 10 })
dds = dds[filter, ]

# Check for typos - number of samples in sample_order and colData(dds) should be 

  design(dds)
  
  dds <- DESeq(dds, test = "LRT", 
               reduced = ~ 1, 
               parallel = TRUE)
  
  # use blind = FALSE to account for experimental design
  rld <- rlog(dds, blind = FALSE)

```

```{r}
# export dds_filt

saveRDS(dds, file = paste0(output_dir, "dds_filt.RDS"))
```


# Likelihood ratio test

```{r}
res_lrt <- results(dds)

res_lrt$gene_biotype= ensembl.genes$gene_biotype[match(row.names(res_lrt), ensembl.genes$gene_id)]
res_lrt$external_gene_name= ensembl.genes$external_gene_name[match(row.names(res_lrt), ensembl.genes$gene_id)]

res_lrt$ensembl_gene_id = rownames(res_lrt)
#head(res_lrt)
```

```{r}
#| label: hist-pval
hist(res_lrt$pvalue)
```

Number of significant genes (padj < 0.1):

```{r}
sum(res_lrt$padj < 0.1, na.rm = TRUE)
```


```{r}
summary(res_lrt)
```

Checking coefficients: 
```{r}
resultsNames(dds)
```


```{r}
# Select significant results
significant_results = res_lrt[!is.na(res_lrt$padj) & 
                                    res_lrt$padj < 0.1, ]


rld_signif = assay(rld)[rownames(significant_results), ]

rld_z = t(apply(rld_signif, 1, function(x){ (x - mean(x)) / sd(x)}))
```



# Determining optimal number of clusters

:::{.panel-tabset}

## Elbow plot

```{r}
#| label: optclust-wss
#| warning: FALSE

k.max <- 15
wss <- sapply(1:k.max,
 function(k){kmeans(rld_z, k, nstart=100,
 iter.max = 20 )$tot.withinss})

plot(1:k.max, wss,
 type="b", pch = 19, frame = FALSE,
 xlab="Number of clusters K",
 ylab="Total within-clusters sum of squares")
```


## Average silhouette width

We perform kmeans for 2-10 clusters, and calculate the average silhouette width for each kmeans. 


What's the best k (maximum average silhouette width)?
```{r}
#| warning: false
# We will use different methods and try 1-10 clusters.

d <- dist(rld_z)
summary(d)
set.seed(1)
ks <- 2:10
ASW <- sapply(ks, FUN = function(k) {
  fpc::cluster.stats(d, kmeans(rld_z, centers=k, nstart = 5)$cluster)$avg.silwidth
  })

best_k <- ks[which.max(ASW)]
best_k
```

### ASW 

```{r}
#| label: optclust-asw
ggplot(as.data.frame(ks, ASW), aes(ks, ASW)) + geom_line() +
  geom_vline(xintercept = best_k, color = "red", linetype = 2) +
  ggtitle("Average silhouette width for varying k clusters")
```

2 clusters looks best, but silhouette width constantly decreases until we reach k = 7. Which means either 3 clusters, or 8 clusters. 

## Silhouette plots

### k = 3
```{r}
#| label: silplot-k3
#| warning: FALSE
k3_coef <- cluster_kmeans(rld_z = rld_z, nclust = 3, 
                          plot_sil = TRUE)
```

:::

# Heatmap

```{r}
#| label: heatmap-setup

sample_order = colData(dds)$sample_id
condition_order <- c("Ctrl", 
                     "W4_OE", "O1_OE", "O1W4_OE", "O2_KO", 
                     "W4_KO", "O1_KO", "O1W4_KO", "O2W4_KO", "O1O2_KO")

#### ------ Row and column annotations ----- ####
row_ann <- as.data.frame(k3_coef$cluster)
colnames(row_ann) = "cluster"
row_ann$cluster = factor(row_ann$cluster, 
                         levels = (1:length(row_ann$cluster)))

col_ann <- data.frame(condition = rep(condition_order, each = 2))
rownames(col_ann) <- sample_order

ann_colors = list(
    condition = c("Ctrl" = "grey30",
                  # OE
                  "W4_OE" = '#00362d', "O1_OE" = '#3a6f60', 
                  "O1W4_OE" = '#80ac95', "O2_KO" = '#ceebcb',
                  # KO
                  "W4_KO" = '#552200', "O1_KO" = '#834a25', 
                  "O1W4_KO" = '#b0764f', "O2W4_KO" = '#daa680', 
                  "O1O2_KO" = '#ffdab8'),
    cluster = c("1" = "grey90", "2" = "grey70", "3" = "grey10")
)

col_colors <- c("darkgrey", #Ctrls
                '#00362d', '#3a6f60', '#80ac95', '#ceebcb', #OEs
                '#552200', '#834a25', '#b0764f', '#daa680', '#ffdab8' #KOs
                )

```


## Kmeans, 3 clusters
```{r}
#| label: heatmap-k3

heatmap_plot <- plot_kmeans_heatmap(rld_z, k_coef = k3_coef,  
                    sample_order = sample_order,
                    labels_col = condition_order, 
                    show_rownames = FALSE,
                    show_colnames = FALSE, 
                    annotation_row = row_ann, 
                    annotation_col = col_ann,
                    annotation_colors = ann_colors)

heatmap_plot
```


```{r}
saveRDS(heatmap_plot, file = paste0(output_dir, "heatmap_plot.RDS"))
```



```{r}
# save this

ggsave(filename = c("../figures/03_clust/heatmap.pdf"),
       plot = heatmap_plot,
       width = 210, 
       height = 145, 
       device = "pdf",
       dpi = "retina",
       units = c("mm"))
```


```{r}
#| label: heatmap-nolegend
#| fig-width: 9
#| fig-height: 5

# Same plot as above, but remove the legend

heatmap_noleg <- plot_kmeans_heatmap(rld_z, k_coef = k3_coef,  
                    sample_order = sample_order,
                    labels_col = condition_order, 
                    show_rownames = FALSE,
                    show_colnames = FALSE, 
                    annotation_row = row_ann, 
                    annotation_col = col_ann,
                    annotation_colors = ann_colors, 
                    annotation_legend = FALSE)

heatmap_noleg
```

```{r}
saveRDS(heatmap_noleg, file = paste0(output_dir, "heatmap_noleg.RDS"))
```



```{r}
ggsave(filename = c("../figures/03_clust/heatmap_noleg.svg"),
       plot = heatmap_noleg,
       width = 210, 
       height = 145, 
       device = "svg",
       units = c("mm"))
```


```{r}
kmeans_cl <- get_cluster_genes(k3_coef, nclust = 3)
```



## Cluster 1
```{r}
#| label: c1-heatmap

ha = HeatmapAnnotation(condition = rep(condition_order, each = 2),
                       col = ann_colors)


clusterHeatmap(rld_z, kmeans_cl = kmeans_cl, 
               clust_num = 1,
               sample_order = sample_order,
              cluster_rows = FALSE,
              font_size = 8,
              top_annotation = ha
)
```

:::{.panel-tabset}

### Zscore boxplot

```{r}
#| label: c1-zscorebox

zscore_boxcondition(kmeans_cl, clust_num = 1, 
                    condition_order = condition_order)
```



### GO - c1

```{r}
#| label: c1-ego
k3_c1_ego <- plotEGO_dm(clust_target_genes = names((kmeans_cl)[[1]]), 
                     universe = rownames(dds), 
                     title = "GO, k=3, cluster 1")
```

How many enrichments? 

```{r}
nrow(k3_c1_ego)
```

### Finding enrichments
```{r}
findEGO(k3_c1_ego, "Wnt", print_top_matches = FALSE)
findEGO(k3_c1_ego, "hippo", print_top_matches = FALSE)
findEGO(k3_c1_ego, "signaling", print_top_matches = FALSE)
findEGO(k3_c1_ego, "mito[st]", print_top_matches = FALSE)
findEGO(k3_c1_ego, "senes|apop|death", print_top_matches = FALSE)
findEGO(k3_c1_ego, "transcript|transl", print_top_matches = FALSE)
findEGO(k3_c1_ego, "adhes", print_top_matches = FALSE)
findEGO(k3_c1_ego, "diff|prolif", print_top_matches = FALSE)
findEGO(k3_c1_ego, "migrat|taxi", print_top_matches = FALSE)
```


### Custom EGO
```{r}
#| label: c1-ego-custom
interesting_pathways <- c("Wnt signaling pathway", 
                          "hippo signaling",
                          "smoothened signaling pathway",
                          "mitotic cell cycle",
                          "programmed cell death", 
                          "cell population proliferation")

custom_ego(k3_c1_ego, interesting_pathways,
           title = "GO, k=3, cluster 1", 
           font_size = 12)

c1_go_table <- custom_ego_table(k3_c1_ego, interesting_pathways)

c1_go_table
```

```{r}
write_csv(k3_c1_ego, file = paste0(output_dir, "k3_c1_ego.csv"))
```


### KEGG - c1

```{r}
#| label: c1-ekegg
#| 
# Get entrez ids
c1_entrez <- na.omit(ensembl.genes[ensembl.genes$gene_id %in% names((kmeans_cl)[[1]]), ]$entrezgene_id)


kegg_universe = ensembl.genes[ensembl.genes$ensembl_gene_id %in% rownames(dds), ]$entrezgene_id

# Run KEGG
k3_c1_ekegg <- plotKEGG_dm(c1_entrez, 
                           universe = kegg_universe, title = "KEGG, cluster 1")
```

```{r}
k3_c1_ekegg
```


```{r}
#| label: c1-kegg-custom
interesting_pathways = c("Ubiquitin mediated proteolysis",
                         "Basal transcription factors",
                         "Nucleotide excision repair",
                         "Notch signaling pathway")

custom_ekegg(k3_c1_ekegg, interesting_pathways,
             title = "KEGG, cluster 1")

c1_kegg_table <- custom_kegg_table(k3_c1_ekegg, interesting_pathways)

c1_kegg_table
```


### Summary



:::



## Cluster 2

```{r}
#| label: c2-heatmap
clusterHeatmap(rld_z, kmeans_cl = kmeans_cl, 
               clust_num = 2, sample_order = sample_order,
              cluster_rows = FALSE,
              font_size = 8,
              top_annotation  = ha)
```

:::{.panel-tabset}

### Zscore-boxplot
```{r}
#| label: c2-zscorebox
zscore_boxcondition(kmeans_cl, clust_num = 2, condition_order)
```

### GO - c2

```{r}
#| label: c2-ego
k3_c2_ego <- plotEGO_dm(clust_target_genes = names((kmeans_cl)[[2]]), 
                     universe = rownames(dds), 
                     title = "GO, k=8, cluster 2")
```


### Finding enrichments
```{r}
findEGO(k3_c2_ego, "Wnt", print_top_matches = FALSE)
findEGO(k3_c2_ego, "DNA", print_top_matches = FALSE)
findEGO(k3_c2_ego, "signal", print_top_matches = FALSE)
findEGO(k3_c2_ego, "repair", print_top_matches = FALSE)
findEGO(k3_c2_ego, "mito[st]", print_top_matches = FALSE)
findEGO(k3_c2_ego, "immun|interleuk", print_top_matches = FALSE)
findEGO(k3_c2_ego, "autophag", print_top_matches = FALSE)
findEGO(k3_c2_ego, "splic", print_top_matches = FALSE)
findEGO(k3_c2_ego, "senes|apop|death", print_top_matches = FALSE)
findEGO(k3_c2_ego, "transcript|transl", print_top_matches = FALSE)
findEGO(k3_c2_ego, "adhes", print_top_matches = FALSE)
findEGO(k3_c2_ego, "diff|prolif", print_top_matches = FALSE)
findEGO(k3_c2_ego, "migrat|taxi", print_top_matches = FALSE)
```


### Custom EGO
```{r}
#| label: c2-ego-custom
#| fig-width: 10
#| fig-height: 8

interesting_pathways <- c(
  # Wnt
  "negative regulation of Wnt signaling pathway",
  # pathways
  "ERBB signaling pathway", 
  "epidermal growth factor receptor signaling pathway", 
  "Ras protein signal transduction",
  "insulin receptor signaling pathway",
  "vascular endothelial growth factor receptor signaling pathway", 
  "fibroblast growth factor receptor signaling pathway",
  "cell death",
  "cell adhesion",
  "chemotaxis"
  
  )

custom_ego(k3_c2_ego, interesting_pathways, 
           title = "GO, k=3, cluster 2", 
           font_size = 10)

c2_go_table <- custom_ego_table(k3_c2_ego, interesting_pathways)

c2_go_table
```



```{r}
write_csv(k3_c2_ego, file = paste0(output_dir, "k3_c2_ego.csv"))
```

### KEGG - c2
```{r}
#| label: c2-ekegg
# Get the entrez IDs
c2_entrez <- na.omit(ensembl.genes[ensembl.genes$gene_id %in% names((kmeans_cl)[[2]]), ]$entrezgene_id)
# Run KEGG
k3_c2_ekegg <- plotKEGG_dm(c2_entrez, 
                           universe = kegg_universe, 
                           title = "KEGG, cluster 2")
```

```{r}
interesting_pathways = c("Endocytosis", 
                         "MAPK signaling pathway - fly",
                         "Hippo signaling pathway - fly",
                         "TGF-beta signaling pathway")

c2_kegg_table <- custom_kegg_table(k3_c2_ekegg, 
                                   interesting_pathways)

c2_kegg_table
```


```{r}
write.csv(k3_c2_ekegg, file = paste0(output_dir, "k3_c2_ekegg.csv"))
```

### Summary



:::



## Cluster 3

```{r}
#| label: c3-heatmap
clusterHeatmap(rld_z, kmeans_cl = kmeans_cl, 
               clust_num = 3, sample_order = sample_order,
              cluster_rows = FALSE,
              font_size = 8, 
              top_annotation = ha)
```

:::{.panel-tabset}

### Zscore boxplot

```{r}
#| label: c3-zscorebox

zscore_boxcondition(kmeans_cl, clust_num = 3, condition_order)
```
### GO - c3

```{r}
#| label: c3-ego
k3_c3_ego <- plotEGO_dm(clust_target_genes = names((kmeans_cl)[[3]]), 
                     universe = rownames(dds), 
                     title = "GO, k=3, cluster 3")
```


### Finding enrichments
```{r}
findEGO(k3_c3_ego, "Wnt", print_top_matches = FALSE)
findEGO(k3_c3_ego, "hippo", print_top_matches = FALSE)
findEGO(k3_c3_ego, "signaling", print_top_matches = FALSE)
findEGO(k3_c3_ego, "mito[st]", print_top_matches = FALSE)
findEGO(k3_c3_ego, "senes|apop|death", print_top_matches = FALSE)
findEGO(k3_c3_ego, "transcript|transl", print_top_matches = FALSE)
findEGO(k3_c3_ego, "adhes", print_top_matches = FALSE)
findEGO(k3_c3_ego, "diff|prolif", print_top_matches = FALSE)
findEGO(k3_c3_ego, "migrat|taxi", print_top_matches = FALSE)
findEGO(k3_c3_ego, "devel", print_top_matches = FALSE)
```


```{r}
interesting_pathways <- c("cell adhesion", 
                          "chemotaxis", 
                          "cuticle development")

c3_go_table <- custom_ego_table(k3_c3_ego, interesting_pathways)

c3_go_table

custom_ego(k3_c3_ego, interesting_pathways, 
           title = "GO, k=3, cluster 3")
```



```{r}
write_csv(k3_c3_ego, file = paste0(output_dir, "k3_c3_ego.csv"))
```

### KEGG - c3


 Run KEGG enrichment
```{r}
#| label: c3-ekegg
c3_entrez <- na.omit(ensembl.genes[ensembl.genes$gene_id %in% names((kmeans_cl)[[3]]), ]$entrezgene_id)

k3_c3_ekegg <- plotKEGG_dm(c3_entrez, title = "KEGG, cluster 3", 
                           universe = kegg_universe)

```

### Custom KEGG

```{r}
k3_c3_ekegg
```


```{r}
interesting_pathways <- c("ECM-receptor interaction",
                          "Neuroactive ligand-receptor interaction",
                          "Lysosome", 
                          "Fatty acid metabolism")

c3_kegg_table <- custom_kegg_table(k3_c3_ekegg, interesting_pathways)

c3_kegg_table
```


### Summary



:::



# Gene boxplots

Plot some cluster genes and figure out why hippo is different between kegg and go

:::{.panel-tabset}

## Wts

```{r}
gene_boxplot <- function(gene_of_interest, dds, title = "title") {
  
  # Get normalized counts
  df_norm <- as.data.frame(counts(dds, normalized = TRUE)[gene_of_interest, ])
  df_norm$sample <- rownames(df_norm)
  colnames(df_norm) <- c("counts", "sample")
  df_norm$sample = factor(df_norm$sample, 
                            levels = colData(dds)$sample_id)
  df_norm$condition = df_norm$sample
  df_norm$condition = gsub("_[0-9]", "", df_norm$condition)
  df_norm$condition = factor(df_norm$condition, 
                               levels = unique(colData(dds)$condition))
  
  # Plot
  gene_plot <- ggplot(df_norm, aes(x = condition, y = counts, fill = condition)) +
    geom_boxplot() +
    geom_point(size = 0.5) +
    labs(title = title, 
         x = "", y = "Normalized counts") +
    scale_fill_manual(values = col_colors) +
    scale_y_continuous(expand = c(0, NA), limits = c(0, NA)) +
    theme_classic() +
    theme(axis.text.x = element_text(angle = 90), 
          legend.position = "none") 
  
  return(gene_plot)
  
}
```


```{r}
c2_kegg_table %>% 
  dplyr::filter(Description == "Hippo signaling pathway - fly") %>% 
  pull(geneID) %>% 
  strsplit(split = "/")
```


```{r}
#| label: genebox-wts

wts <- "FBgn0011739"
gene_boxplot(wts, dds, title = "wts")
```

## Vn
```{r}
#| label: genebox-vn
vn = "FBgn0003984"

gene_boxplot(vn, dds, title = "vn")
```

## GO terms
Alright, what's in the GO terms? 

```{r}
hippo_c1 <- k3_c1_ego %>% 
  dplyr::filter(Description == "hippo signaling") %>% 
  pull(geneID) %>% 
  strsplit(split = "/") %>% 
  unlist()


df_hippo <- as_tibble(ensembl.genes) %>% 
  filter(external_gene_name %in% hippo_c1) %>% 
  dplyr::select(ensembl_gene_id, external_gene_name) %>% 
  arrange(external_gene_name)

df_hippo
```

## Hpo
```{r}
#| label: genebox-hpo

gene_boxplot("FBgn0261456", dds, title = "hpo")
```

## Mats

```{r}
#| label: genebox-mats
gene_boxplot("FBgn0038965", dds, title = "mats")
```

## Rae1

```{r}
#| label: genebox-rae1

gene_boxplot("FBgn0034646", dds, title = "Rae1")
```
:::


# Exports

```{r}
# to make the plots
saveRDS(rld_z, file = paste0(output_dir, "rld_z.RDS"))
saveRDS(kmeans_cl, file = paste0(output_dir, "kmeans_cl.RDS"))
```

# Export cluster genes for compilation 

```{r}
# Convert cluster genes to data frame
df_cluster <- as.data.frame(unlist(kmeans_cl))
colnames(df_cluster) <- "cluster"
df_cluster$ensembl_gene_id <- rownames(df_cluster)

# Genes that are expressed but not in cluster - not significant. 
not_signif <- rownames(dds)[!rownames(dds) %in% df_cluster$ensembl_gene_id]
df_ns <- data.frame(ensembl_gene_id = not_signif, 
                    cluster = "NS")

# Combine both
df_combined <- rbind(df_cluster, df_ns)

# Add gene biotype
df_combined$gene_biotype = ensembl.genes$gene_biotype[match(df_combined$ensembl_gene_id, 
                                                            ensembl.genes$gene_id)]
# Add gene name
df_combined$gene_name = ensembl.genes$external_gene_name[match(df_combined$ensembl_gene_id, 
                                                               ensembl.genes$gene_id)]

# Add pvalue
df_combined$pvalue = res_lrt$pvalue[match(df_combined$ensembl_gene_id, 
                                          res_lrt$ensembl_gene_id)]
# Add padj
df_combined$padj = res_lrt$padj[match(df_combined$ensembl_gene_id, 
                                          res_lrt$ensembl_gene_id)]

# Arrange
df_combined <- df_combined %>% 
  dplyr::select(ensembl_gene_id, pvalue, padj, 
                gene_biotype, gene_name, cluster)

# Export
write.csv(df_combined, file = paste0(output_dir, "cluster_genes.csv"),
          row.names = FALSE)
```


## Export GO and KEGG for figure

```{r}
c1_go_table$cluster = 1
c2_go_table$cluster = 2
c3_go_table$cluster = 3

go_tables <- rbind(c1_go_table, c2_go_table, c3_go_table)

write.csv(go_tables, file = paste0(output_dir, "go_tables.csv"))

c1_kegg_table$cluster = 1
c2_kegg_table$cluster = 2
c3_kegg_table$cluster = 3

kegg_tables <- rbind(c1_kegg_table, c2_kegg_table, c3_kegg_table)

write.csv(kegg_tables, file = paste0(output_dir, "kegg_tables.csv"))
```

# Summary and discussion


# Session info

```{r}
sessionInfo()
```

